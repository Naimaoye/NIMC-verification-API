{"version":3,"sources":["../src/app.js"],"names":["app","MongoClient","mongodb","isProduction","process","env","NODE_ENV","use","bodyParser","urlencoded","extended","json","express","path","join","__dirname","userAuth","options","useNewUrlParser","useUnifiedTopology","useCreateIndex","useFindAndModify","autoIndex","poolSize","connect","liveUri","err","db","console","log","close","mongoose","set","req","res","next","status","error","errors","message","PORT","listen"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,GAAG,GAAG,0BAAZ;AAEA,IAAMC,WAAW,GAAGC,oBAAQD,WAA5B;AAEA,IAAME,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA9C,C,CAEA;;AACAN,GAAG,CAACO,GAAJ,CAAQ,uBAAR;AACAP,GAAG,CAACO,GAAJ,CAAQC,uBAAWC,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAV,GAAG,CAACO,GAAJ,CAAQC,uBAAWG,IAAX,EAAR;AACAX,GAAG,CAACO,GAAJ,CAAQ,iCAAR;AACAP,GAAG,CAACO,GAAJ,CAAQK,8BAAeC,iBAAKC,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAR;AACAf,GAAG,CAACO,GAAJ,CAAQ,eAAR,EAAyBS,oBAAzB;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,eAAe,EAAE,IADH;AAEdC,EAAAA,kBAAkB,EAAE,IAFN;AAGdC,EAAAA,cAAc,EAAE,IAHF;AAIdC,EAAAA,gBAAgB,EAAE,KAJJ;AAKdC,EAAAA,SAAS,EAAE,KALG;AAKI;AAClBC,EAAAA,QAAQ,EAAE,EANI,CAMA;;AANA,CAAhB,C,CASA;AACA;AACA;AACA;;AAGAtB,WAAW,CAACuB,OAAZ,CAAoBC,eAApB,EAA6B,UAASC,GAAT,EAAcC,EAAd,EAAkB;AAC7C,MAAID,GAAJ,EAAS,MAAMA,GAAN;AACTE,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAF,EAAAA,EAAE,CAACG,KAAH;AACD,CAJD;;AAMAC,qBAASC,GAAT,CAAa,kBAAb,EAAiC,KAAjC;;AAEAhC,GAAG,CAACO,GAAJ,CAAQK,wCAAkBG,SAAlB,aAAR,E,CAEA;;AACAf,GAAG,CAACO,GAAJ,CAAQ,UAAC0B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxBD,EAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBzB,IAAhB,CAAqB;AACnByB,IAAAA,MAAM,EAAE,GADW;AAEnBC,IAAAA,KAAK,EAAE;AAFY,GAArB;AAIH,CALD,E,CAOA;;AACA,IAAG,CAAClC,YAAJ,EAAkB;AACdH,EAAAA,GAAG,CAACO,GAAJ,CAAQ,UAACmB,GAAD,EAAMO,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC/BD,IAAAA,GAAG,CAACE,MAAJ,CAAWV,GAAG,CAACU,MAAJ,IAAc,GAAzB;AAEAF,IAAAA,GAAG,CAACvB,IAAJ,CAAS;AACP2B,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAEb,GAAG,CAACa,OADP;AAENF,QAAAA,KAAK,EAAEX;AAFD;AADD,KAAT;AAOD,GAVD;AAWD;;AAED1B,GAAG,CAACO,GAAJ,CAAQ,UAACmB,GAAD,EAAMO,GAAN,EAAWC,GAAX,EAAmB;AACzBA,EAAAA,GAAG,CAACE,MAAJ,CAAWV,GAAG,CAACU,MAAJ,IAAc,GAAzB;AAEAF,EAAAA,GAAG,CAACvB,IAAJ,CAAS;AACP2B,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAEb,GAAG,CAACa,OADP;AAENF,MAAAA,KAAK,EAAE;AAFD;AADD,GAAT;AAMD,CATD;AAWF,IAAMG,IAAI,GAAGpC,OAAO,CAACC,GAAR,CAAYmC,IAAZ,IAAoB,IAAjC;AACAxC,GAAG,CAACyC,MAAJ,CAAWD,IAAX,EAAiB,YAAM;AACnBZ,EAAAA,OAAO,CAACC,GAAR,+BAAmCW,IAAnC;AACH,CAFD","sourcesContent":["import express from 'express';\nimport mongoose from 'mongoose';\nimport mongodb from 'mongodb';\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\nimport path from 'path'\nimport methodOverride from 'method-override';\nimport { devUri, liveUri } from './config/config';\nimport userAuth from './route/userAuth';\n\nconst app = express();\n\nconst MongoClient = mongodb.MongoClient;\n\nconst isProduction = process.env.NODE_ENV === 'production';\n\n// Normal express config defaults\napp.use(cors());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\napp.use(methodOverride());\napp.use(express.static(path.join(__dirname, 'public')));\napp.use('/digitalpulse', userAuth);\n\nconst options = {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n  useCreateIndex: true,\n  useFindAndModify: false,\n  autoIndex: false, // Don't build indexes\n  poolSize: 10, // Maintain up to 10 socket connections\n};\n\n// mongoose.connect(devUri, options, (err) => {\n//   if (err) throw err;\n//   console.log('connected to the DB!');\n// });\n\n\nMongoClient.connect(liveUri, function(err, db) {\n  if (err) throw err;\n  console.log(\"Database created!\");\n  db.close();\n});\n\nmongoose.set('useFindAndModify', false);\n\napp.use(express.static(`${__dirname}/public`));\n\n// handle non-existing route\napp.use((req, res, next) => {\n    res.status(404).json({\n      status: 404,\n      error: 'Wrong request. Route does not exist',\n    });\n});  \n\n//Error handlers & middlewares\nif(!isProduction) {\n    app.use((err, req, res, next) => {\n      res.status(err.status || 500);\n  \n      res.json({\n        errors: {\n          message: err.message,\n          error: err,\n        },\n      });\n\n    });\n  }\n\n  app.use((err, req, res) => {\n    res.status(err.status || 500);\n  \n    res.json({\n      errors: {\n        message: err.message,\n        error: {},\n      },\n    });\n  });\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`App running on port ${PORT}`);\n});\n"],"file":"app.js"}