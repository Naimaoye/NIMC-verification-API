{"version":3,"sources":["../../src/models/User.js"],"names":["userSchema","mongoose","Schema","email","type","String","required","lowercase","unique","firstName","lastName","phoneNumber","password","token","Number","createdAt","Date","now","pre","next","user","isModified","console","log","bcrypt","genSalt","err","salt","error","hash","User","model"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,UAAU,GAAI,IAAIC,qBAASC,MAAb,CAAoB;AACpCC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE,IAA1B;AAAgCC,IAAAA,SAAS,EAAE,IAA3C;AAAiDC,IAAAA,MAAM,EAAE;AAAzD,GAD6B;AAEpCC,EAAAA,SAAS,EAAE;AAAEL,IAAAA,IAAI,EAAEC;AAAR,GAFyB;AAGpCK,EAAAA,QAAQ,EAAE;AAAEN,IAAAA,IAAI,EAAEC;AAAR,GAH0B;AAIpCM,EAAAA,WAAW,EAAE;AAAEP,IAAAA,IAAI,EAAEC;AAAR,GAJuB;AAKpCO,EAAAA,QAAQ,EAAE;AAAER,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAL0B;AAMpCO,EAAAA,KAAK,EAAE;AAAET,IAAAA,IAAI,EAAEU,MAAR;AAAiB,eAAS;AAA1B,GAN6B;AAOpCC,EAAAA,SAAS,EAAE;AAAEX,IAAAA,IAAI,EAAEY,IAAR;AAAc,eAASA,IAAI,CAACC;AAA5B;AAPyB,CAApB,CAApB;AAUAjB,UAAU,CAACkB,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACnC,MAAIC,IAAI,GAAG,IAAX;AACA,MAAG,CAACA,IAAI,CAACC,UAAL,CAAgB,UAAhB,CAAJ,EAAiC,OAAOF,IAAI,EAAX;AACjCG,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACC,UAAjB;;AACAG,uBAAOC,OAAP,CAAe,EAAf,EAAmB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAClC,QAAID,GAAJ,EAASJ,OAAO,CAACM,KAAR,CAAcF,GAAd;;AACTF,yBAAOK,IAAP,CAAYT,IAAI,CAACR,QAAjB,EAA2Be,IAA3B,EAAiC,UAACD,GAAD,EAAMG,IAAN,EAAe;AAC9CT,MAAAA,IAAI,CAACR,QAAL,GAAgBiB,IAAhB;AACAV,MAAAA,IAAI;AACL,KAHD;AAID,GANC;AAOD,CAXH;;AAcA,IAAMW,IAAI,GAAG7B,qBAAS8B,KAAT,CAAe,MAAf,EAAuB/B,UAAvB,CAAb;;eAEe8B,I","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\n\nconst userSchema =  new mongoose.Schema({\n    email: { type: String, required: true, lowercase: true, unique: true },\n    firstName: { type: String },\n    lastName: { type: String },\n    phoneNumber: { type: String },\n    password: { type: String, required: true },\n    token: { type: Number,  default: 0 },\n    createdAt: { type: Date, default: Date.now }\n});\n\nuserSchema.pre('save', function (next) {\n    let user = this;\n    if(!user.isModified('password')) return next();\n    console.log(user.isModified);\n    bcrypt.genSalt(10, (err, salt) => {\n    if (err) console.error(err);\n    bcrypt.hash(user.password, salt, (err, hash) => {\n      user.password = hash\n      next();\n    })\n  });\n  });\n\n\nconst User = mongoose.model('User', userSchema);\n\nexport default User;"],"file":"User.js"}