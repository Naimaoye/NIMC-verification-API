{"version":3,"sources":["../../src/controller/users.js"],"names":["UserController","req","res","body","email","password","firstName","lastName","phoneNumber","trim","user","newUser","User","save","resp","token","jwt","sign","id","_id","SECRET_KEY","history","userId","newReport","Report","status","json","message","error","toLowerCase","findOne","expiresIn","jwToken","requestToken","console","log","err","query","data","oldToken","tokenBody","parseFloat","newToken"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;IAIqBA,c;;;;;;;;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;kGACA,iBAAoBC,GAApB,EAAyBC,GAAzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAIMD,GAAG,CAACE,IAJV,EAGIC,KAHJ,aAGIA,KAHJ,EAGWC,QAHX,aAGWA,QAHX,EAGqBC,SAHrB,aAGqBA,SAHrB,EAGgCC,QAHhC,aAGgCA,QAHhC,EAG0CC,WAH1C,aAG0CA,WAH1C;AAKEJ,gBAAAA,KAAK,GAAGA,KAAK,CAACK,IAAN,EAAR;AACAH,gBAAAA,SAAS,GAAGA,SAAS,CAACG,IAAV,EAAZ;AACAF,gBAAAA,QAAQ,GAAGA,QAAQ,CAACE,IAAT,EAAX;AACAD,gBAAAA,WAAW,GAAGA,WAAW,CAACC,IAAZ,EAAd;AACAJ,gBAAAA,QAAQ,GAAGA,QAAX;AACIK,gBAAAA,IAVN,GAUa;AACTN,kBAAAA,KAAK,EAALA,KADS;AACFC,kBAAAA,QAAQ,EAARA,QADE;AACQC,kBAAAA,SAAS,EAATA,SADR;AACmBC,kBAAAA,QAAQ,EAARA,QADnB;AAC6BC,kBAAAA,WAAW,EAAXA;AAD7B,iBAVb;AAcMG,gBAAAA,OAdN,GAcgB,IAAIC,gBAAJ,CAASF,IAAT,CAdhB;AAAA;AAAA,uBAeqBC,OAAO,CAACE,IAAR,EAfrB;;AAAA;AAeQC,gBAAAA,IAfR;AAgBMC,gBAAAA,KAhBN,GAgBcC,yBAAIC,IAAJ,CAAS;AACnBC,kBAAAA,EAAE,EAAEJ,IAAI,CAACK;AADU,iBAAT,EAETC,kBAFS,CAhBd;AAmBMC,gBAAAA,OAnBN,GAmBgB;AACZC,kBAAAA,MAAM,EAAER,IAAI,CAACK;AADD,iBAnBhB;AAsBMI,gBAAAA,SAtBN,GAsBkB,IAAIC,kBAAJ,CAAWH,OAAX,CAtBlB;AAAA;AAAA,uBAuBQE,SAAS,CAACV,IAAV,EAvBR;;AAAA;AAAA,iDAwBSX,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,kBAAAA,OAAO,EAAE,2BADiB;AAE1BF,kBAAAA,MAAM,EAAE,GAFkB;AAG1BV,kBAAAA,KAAK,EAAEA;AAHmB,iBAArB,CAxBT;;AAAA;AAAA;AAAA;AAAA,iDA8BSb,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,GADkB;AAE1BG,kBAAAA,KAAK,EAAE;AAFmB,iBAArB,CA9BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;kGAEA,kBAAoB3B,GAApB,EAAyBC,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUE,gBAAAA,KAFV,GAEoBH,GAAG,CAACE,IAFxB,CAEUC,KAFV;AAGIA,gBAAAA,KAAK,GAAGA,KAAK,CAACK,IAAN,GAAaoB,WAAb,EAAR;AAHJ;AAAA,uBAIuBjB,iBAAKkB,OAAL,CAAa;AAAE1B,kBAAAA,KAAK,EAALA;AAAF,iBAAb,CAJvB;;AAAA;AAIUM,gBAAAA,IAJV;AAKQK,gBAAAA,KALR,GAKgBC,yBAAIC,IAAJ,CAAS;AACnBC,kBAAAA,EAAE,EAAER,IAAI,CAACQ;AADU,iBAAT,EAETE,kBAFS,EAEG;AAAEW,kBAAAA,SAAS,EAAE;AAAb,iBAFH,CALhB;AAAA,kDAQW7B,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,GADkB;AAE1BE,kBAAAA,OAAO,EAAC,mBAFkB;AAG1BK,kBAAAA,OAAO,EAAEjB,KAHiB;AAI1BkB,kBAAAA,YAAY,EAAEvB,IAAI,CAACK;AAJO,iBAArB,CARX;;AAAA;AAAA;AAAA;AAeImB,gBAAAA,OAAO,CAACC,GAAR;AAfJ,kDAgBWjC,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,GADkB;AAE1BG,kBAAAA,KAAK,EAAC;AAFoB,iBAArB,CAhBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;oGACA,kBAAsB3B,GAAtB,EAA2BC,GAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAE8DD,GAAG,CAACE,IAFlE,EAEQC,KAFR,cAEQA,KAFR,EAEeC,QAFf,cAEeA,QAFf,EAEyBC,SAFzB,cAEyBA,SAFzB,EAEoCC,QAFpC,cAEoCA,QAFpC,EAE8CC,WAF9C,cAE8CA,WAF9C;AAGIJ,gBAAAA,KAAK,GAAGA,KAAK,CAACK,IAAN,EAAR;AACAH,gBAAAA,SAAS,GAAGA,SAAS,CAACG,IAAV,EAAZ;AACAF,gBAAAA,QAAQ,GAAGA,QAAQ,CAACE,IAAT,EAAX;AACAD,gBAAAA,WAAW,GAAGA,WAAW,CAACC,IAAZ,EAAd;AACAJ,gBAAAA,QAAQ,GAAGA,QAAX;AAPJ;AAAA,uBAQuBO,iBAAKkB,OAAL,CAAa;AAAE1B,kBAAAA,KAAK,EAALA;AAAF,iBAAb,CARvB;;AAAA;AAQUM,gBAAAA,IARV;;AAAA,oBASQA,IATR;AAAA;AAAA;AAAA;;AAAA,kDAUaR,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,GADkB;AAE1BE,kBAAAA,OAAO,EAAE;AAFiB,iBAArB,CAVb;;AAAA;AAeIjB,gBAAAA,IAAI,CAACL,QAAL,GAAgBA,QAAhB;AACAK,gBAAAA,IAAI,CAACJ,SAAL,GAAiBA,SAAjB;AACAI,gBAAAA,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAG,gBAAAA,IAAI,CAACF,WAAL,GAAmBA,WAAnB;AAlBJ;AAAA,uBAmBUE,IAAI,CAACG,IAAL,EAnBV;;AAAA;AAAA,kDAoBWX,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,GADgB;AAExBE,kBAAAA,OAAO,EAAE;AAFe,iBAArB,CApBX;;AAAA;AAAA;AAAA;AAyBIzB,gBAAAA,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,kBAAAA,MAAM,EAAE,GADW;AAEnBE,kBAAAA,OAAO,EAAES;AAFU,iBAArB;;AAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;4GAEA,kBAA8BnC,GAA9B,EAAmCC,GAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUgB,gBAAAA,EAFV,GAEiBjB,GAAG,CAACoC,KAFrB,CAEUnB,EAFV;AAAA;AAAA,uBAGyBN,iBAAKkB,OAAL,CAAa;AAACX,kBAAAA,GAAG,EAAED;AAAN,iBAAb,CAHzB;;AAAA;AAGYR,gBAAAA,IAHZ;;AAAA,oBAIUA,IAJV;AAAA;AAAA;AAAA;;AAAA,kDAKeR,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,GADkB;AAE1BE,kBAAAA,OAAO,EAAE;AAFiB,iBAArB,CALf;;AAAA;AAAA,kDAUazB,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,GADkB;AAE1Ba,kBAAAA,IAAI,EAAE;AACJlC,oBAAAA,KAAK,EAAEM,IAAI,CAACN,KADR;AAEJE,oBAAAA,SAAS,EAAEI,IAAI,CAACJ,SAFZ;AAGJC,oBAAAA,QAAQ,EAAEG,IAAI,CAACH,QAHX;AAIJC,oBAAAA,WAAW,EAAEE,IAAI,CAACF,WAJd;AAKJyB,oBAAAA,YAAY,EAAEvB,IAAI,CAACK;AALf;AAFoB,iBAArB,CAVb;;AAAA;AAAA;AAAA;AAsBMb,gBAAAA,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,kBAAAA,MAAM,EAAE,GADW;AAEnBE,kBAAAA,OAAO,EAAES;AAFU,iBAArB;;AAtBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AA6BE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;oGAEA,kBAAsBnC,GAAtB,EAA2BC,GAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEE;AAFF,6BAGyBD,GAAG,CAACE,IAH7B,EAGSC,KAHT,cAGSA,KAHT,EAGgBW,KAHhB,cAGgBA,KAHhB;AAAA;AAAA,uBAIqBH,iBAAKkB,OAAL,CAAa;AAAC1B,kBAAAA,KAAK,EAAEA;AAAR,iBAAb,CAJrB;;AAAA;AAIQM,gBAAAA,IAJR;;AAAA,qBAKKA,IALL;AAAA;AAAA;AAAA;;AAMU6B,gBAAAA,QANV,GAMqB7B,IAAI,CAACK,KAN1B;AAOUyB,gBAAAA,SAPV,GAOsBC,UAAU,CAAC1B,KAAD,CAPhC;AAQU2B,gBAAAA,QARV,GAQqBH,QAAQ,GAAGC,SARhC;AASI9B,gBAAAA,IAAI,CAACK,KAAL,GAAa2B,QAAb;AATJ;AAAA,uBAUuBhC,IAAI,CAACG,IAAL,EAVvB;;AAAA;AAUUC,gBAAAA,IAVV;AAAA,kDAWWZ,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,GADkB;AAE1BE,kBAAAA,OAAO,EAAE,0BAFiB;AAG1BW,kBAAAA,IAAI,EAAExB,IAAI,CAACC;AAHe,iBAArB,CAXX;;AAAA;AAAA,kDAiBWb,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,GADkB;AAE1BE,kBAAAA,OAAO,EAAE;AAFiB,iBAArB,CAjBX;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuBEO,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AAvBF,kDAwBSjC,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,GADkB;AAE1BE,kBAAAA,OAAO,EAAE;AAFiB,iBAArB,CAxBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O","sourcesContent":["import jwt from 'jsonwebtoken';\nimport Report from '../models/Report';\nimport User from '../models/User';\nimport { SECRET_KEY } from '../config/config';\n\n\n\nexport default class UserController {\n/**\n     * @method\n     * @description Implements signup endpoint\n     * @static\n     * @param {object} req - Request object\n     * @param {object} res - Response object\n     * @returns {object} JSON response\n     * @memberof UserController\n     */\nstatic async signup(req, res) {\n  try{\nlet {\n    email, password, firstName, lastName, phoneNumber\n  } = req.body;\n  email = email.trim();\n  firstName = firstName.trim();\n  lastName = lastName.trim();\n  phoneNumber = phoneNumber.trim();\n  password = password;\n  let user = {\n    email, password, firstName, lastName, phoneNumber\n  };\n   \n  let newUser = new User(user);\n  const resp = await newUser.save();\n  let token = jwt.sign({\n    id: resp._id,\n  }, SECRET_KEY);\n  let history = {\n    userId: resp._id\n  }\n  let newReport = new Report(history);\n  await newReport.save();\n  return res.status(201).json({\n    message: 'user created successfully',\n    status: 201,\n    token: token\n  });\n} catch(e){\n  return res.status(500).json({\n    status: 500, \n    error: 'database error'\n  });\n}\n};\n\n/**\n     * @method\n     * @description Implements signin endpoint\n     * @static\n     * @param {object} req - Request object\n     * @param {object} res - Response object\n     * @returns {object} JSON response\n     * @memberof UserController\n     */\n\nstatic async signin(req, res) {\n  try{\n    let { email } = req.body;\n    email = email.trim().toLowerCase();\n    const user = await User.findOne({ email });\n    let token = jwt.sign({\n      id: user.id,\n    }, SECRET_KEY, { expiresIn: '12h' });  \n    return res.status(200).json({\n      status: 200, \n      message:'Login successful.', \n      jwToken: token,\n      requestToken: user.token\n    });\n  }catch(e){\n    console.log(e)\n    return res.status(500).json({\n      status: 500, \n      error:'database error'\n    });\n  }\n};\n\n/**\n     * @method\n     * @description Implements editUser endpoint\n     * @static\n     * @param {object} req - Request object\n     * @param {object} res - Response object\n     * @returns {object} JSON response\n     * @memberof UserController\n     */\nstatic async editUser(req, res) {\n  try{\n  let { email, password, firstName, lastName, phoneNumber } = req.body;\n    email = email.trim();\n    firstName = firstName.trim();\n    lastName = lastName.trim();\n    phoneNumber = phoneNumber.trim();\n    password = password;\n    const user = await User.findOne({ email });\n    if(!user){\n      return res.status(404).json({\n        status: 404,\n        message: 'user not found',\n    });\n    }\n    user.password = password;\n    user.firstName = firstName;\n    user.lastName = lastName;\n    user.phoneNumber = phoneNumber;\n    await user.save();\n    return res.status(200).json({\n        status: 200,\n        message: 'successfully updated your profile',\n    });\n  } catch(e){\n    res.status(500).json({\n      status: 500,\n      message: err\n    })\n  }\n}\n\n/**\n     * @method\n     * @description Implements returnSingleuser endpoint\n     * @static\n     * @param {object} req - query parametr\n     * @param {object} res - Response object\n     * @returns {object} JSON response\n     * @memberof UserController\n     */\n\nstatic async returnSingleUser(req, res) {\n    try{\n    let { id } = req.query;\n      const user = await User.findOne({_id: id});\n      if(!user){\n        return res.status(404).json({\n          status: 404,\n          message: 'user not found',\n      });\n      }\n      return res.status(200).json({\n        status: 200,\n        data: { \n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          phoneNumber: user.phoneNumber,\n          requestToken: user.token \n        }\n    });\n     \n    } catch(e){\n      res.status(500).json({\n        status: 500,\n        message: err\n      })\n    }\n  }\n\n  /**\n     * @method\n     * @description Implements signin endpoint\n     * @static\n     * @param {object} req - Request object\n     * @param {object} res - Response object\n     * @returns {object} JSON response\n     * @memberof UserController\n     */\n\nstatic async addToken(req, res) {\n  try{\n  //use the user's email\n  const {email, token} = req.body;\n  const user = await User.findOne({email: email});\n  if(user){\n    const oldToken = user.token;\n    const tokenBody = parseFloat(token);\n    const newToken = oldToken + tokenBody;\n    user.token = newToken;\n    const resp = await user.save();\n    return res.status(200).json({\n      status: 200,\n      message: 'Token successfully added',\n      data: resp.token\n  });\n  } else{\n    return res.status(404).json({\n      status: 404,\n      message: 'user not found',\n  });\n  }\n}catch(e){\n  console.log(\"err\", e)\n  return res.status(500).json({\n    status: 500,\n    message: 'internal server error',\n});\n}\n};\n\n}\n"],"file":"users.js"}