{"version":3,"sources":["../../src/middleware/user-validation.js"],"names":["validateLogin","req","res","next","password","body","toLowerCase","User","findOne","email","trim","then","response","status","json","message","bcrypt","compare","err","isMatch","console","log","validateUser","path","user","_","has","Schemas","schema","get","Joi","validate","abortEarly","error","errors","details","forEach","push","context","label","userExists","data"],"mappings":"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","sourcesContent":["import Joi from '@hapi/joi';\nimport _ from 'lodash';\nimport bcrypt from 'bcryptjs';\n\nimport Schemas from './validations';\nimport User from '../models/User';\n\n/**\n   * @function\n   * @description Check if user email exist, password correct and verified\n   * @param {object} req - Resquest object\n   * @param {object} res - Response object\n   * @param {object} next\n   * @returns {object} JSON response\n   */\n  const validateLogin = (req, res, next) => {\n    const password = req.body.password.toLowerCase();\n    User.findOne({ email: req.body.email.trim().toLowerCase() }).then(response => {\n      if (!response) {\n        return res.status(404).json({\n            status: 404, \n            message: 'Wrong credentials'\n    });\n    }\n      bcrypt.compare(password, response.password, (err, isMatch) => {\n      if (!isMatch) {\n        return res.status(401).json({ \n            status: 401, \n            message: 'Wrong credentials'\n        });\n      }\n     if(err){\n       console.log(err);\n       return res.status(500).json({\n        status: 500, \n        message: 'Database error'\n     });\n     }\n      next();\n    })\n})\n\n}\nconst validateUser = path => (req, res, next) => {\n    const user = req.body;\n    if (_.has(Schemas, path)) {\n      const schema = _.get(Schemas, path, 0);\n      const response = Joi.validate(user, schema, { abortEarly: false });\n      if (!response.error) {\n        req.body = user;\n      } else {\n        const errors = [];\n        response.error.details.forEach(error => {\n          errors.push(error.context.label);\n          console.log(error);\n        });\n        return res.status(400).json({status: 400, error: errors});\n      }\n    }\n    next();\n  };\n\n  /**\n * @function\n * @description Check if email is already exists\n * @param {object} req - Resquest object\n * @param {object} res - Response object\n * @param {object} next\n * @returns {object} JSON response\n */\nconst userExists = (req, res, next) => {\n  User.findOne({ email: req.body.email.trim() }).then(data => {\n    if (data) {\n      return res.status(409).json({\n          status: 409, \n          message: 'email already taken'\n      });\n    }\n    next();\n  }).catch(() => {\n    return res.status(500).json({\n        status: 500, \n        message: 'database error'\n      });\n  });\n};\n\nexport default {\n    validateLogin,\n    validateUser,\n    userExists\n}"],"file":"user-validation.js"}